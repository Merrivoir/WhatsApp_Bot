import sys
import os
import csv
import json
import random
import time
import pyperclip
import pyautogui

from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from colorama import Fore, Style, init

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
init(autoreset=True)

# === –ü—É—Ç–∏ ===
CONTACTS_FILE = 'contacts/Base.csv'
TEMPLATES_FILE = 'templates/templates.txt'
SUCCESS_LOG = 'logs/log_success_2206.csv'
ERROR_LOG = 'logs/log_error.txt'
REPORT_FILE = 'logs/report.txt'
CONFIG_FILE = 'config.json'
STOPLIST_FILE = 'contacts/stoplist.csv'

# === –§—É–Ω–∫—Ü–∏–∏ ===

import random

# –°–ø–∏—Å–∫–∏ –¥–ª—è –∂–∏–≤–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
greetings = [
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}",
    "{name}, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ",
    "{name}, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å"
]

good_endings = [
    "",
    "",
]

def generate_message(name, templates): 
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∂–∏–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–º–µ–Ω–∏."""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è
    has_real_name = name.lower() != "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ"

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–±–ª–æ–Ω
    base_message = random.choice(templates)
    base_message = base_message.replace("{name}", name) if has_real_name else base_message.replace("{name}", "")

    parts = []

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (—Å –∏–º–µ–Ω–µ–º –∏–ª–∏ –±–µ–∑)
    if random.random() < 1:
        if has_real_name:
            greet = random.choice(greetings).replace("{name}", name)
        else:
            greet = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!"
        parts.append(greet)

    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """ parts.append(
–≠—Ç–æ –û–ª—å–≥–∞ –õ—å–≤–æ–≤–∞ ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º –∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –∫–ª—É–±–∞ CashFlow –≤ –ê–ª–º–∞—Ç—ã.

–í—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º–∏ –∏–≥—Ä–∞–º–∏, –Ω–æ –ø–æ–∫–∞ –Ω–µ —É—Å–ø–µ–ª–∏ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å.
–ü–æ—ç—Ç–æ–º—É —Ö–æ—á—É –ª–∏—á–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤–∞—Å –≤ –æ–±—É—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–≤–µ—Ä–µ–Ω–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–∞—Ö –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö.

üìå –Ø —Å–æ–∑–¥–∞–ª–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å:
¬´–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –∫—Ä–∏–ø—Ç–∞ ‚Äî –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º¬ª

–û–Ω –ø–æ–¥–æ–π–¥—ë—Ç –¥–∞–∂–µ —Ç–µ–º, –∫—Ç–æ –ø–æ–∫–∞ –Ω–µ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è –≤ –¥–µ–Ω—å–≥–∞—Ö, –Ω–µ —É–º–µ–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –Ω–µ –∑–Ω–∞–µ—Ç, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å.

–í –ø—Ä–æ–≥—Ä–∞–º–º–µ:
‚Äî —É—á—ë—Ç –∏ —Ä–æ—Å—Ç –¥–æ—Ö–æ–¥–∞
‚Äî –∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–æ–∫–µ—Ä—Å–∫–∏–π —Å—á—ë—Ç –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ
‚Äî –∫–∞–∫ –ø–æ–∫—É–ø–∞—Ç—å –∞–∫—Ü–∏–∏ –∏ –∫—Ä–∏–ø—Ç—É
‚Äî –∫–∞–∫ —Å–æ–±—Ä–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–µ–Ω—å–≥–∏
‚Äî –±–æ–Ω—É—Å: –∫–∞–∫ –Ω–µ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤ –∏ –Ω–µ —Å–¥–∞—Ç—å—Å—è –Ω–∞ —Å—Ç–∞—Ä—Ç–µ

üéÅ –¢–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å ‚Äî –¥–ª—è –ø–µ—Ä–≤—ã—Ö 100 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫—É—Ä—Å —Å—Ç–æ–∏—Ç 15 000 ‚Ç∏
(–≤–º–µ—Å—Ç–æ 25 000 ‚Ç∏).

üì≤ –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –æ—Ç–≤–µ—Ç ¬´–•–û–ß–£ –ö–£–†–°¬ª, –∏ —è –ø—Ä–∏—à–ª—é –≤–∞–º —Å—Å—ã–ª–∫—É —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª, –≥–¥–µ —è —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É –∫—É—Ä—Å–∞.

–≠—Ç–æ –∏–¥–µ–∞–ª—å–Ω–æ–µ –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ –≤—ã –¥–∞–≤–Ω–æ —Ö–æ—Ç–µ–ª–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –¥–µ–Ω—å–≥–∞—Ö, –Ω–æ –Ω–µ –∑–Ω–∞–ª–∏, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å.

–ë—É–¥—É —Ä–∞–¥–∞ –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ —á–∏—Å–ª–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!
–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –û–ª—å–≥–∞ –õ—å–≤–æ–≤–∞"""
    
    parts.append("""
–≠—Ç–æ –û–ª—å–≥–∞ –õ—å–≤–æ–≤–∞ - –≤–µ–¥—É—â–∞—è –∏–≥—Ä CashFlow, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º.

–í—ã —É–∂–µ –±—ã–ª–∏ —É –Ω–∞—Å –Ω–∞ –∏–≥—Ä–µ, –∞ –∑–Ω–∞—á–∏—Ç ‚Äî –∑–Ω–∞–µ—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω–æ —É–º–µ—Ç—å —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–µ–Ω—å–≥–∞–º–∏ –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è.

üì£ –°–µ–π—á–∞—Å —Ö–æ—á—É –ª–∏—á–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤–∞—Å –Ω–∞ –º–æ–π –Ω–æ–≤—ã–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∫—É—Ä—Å:
¬´–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –∫—Ä–∏–ø—Ç–∞ ‚Äî –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏¬ª

üìå –í –ø—Ä–æ–≥—Ä–∞–º–º–µ:
‚Äî —É—á—ë—Ç –ª–∏—á–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ —Ä–æ—Å—Ç –¥–æ—Ö–æ–¥–∞
‚Äî –∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–æ–∫–µ—Ä—Å–∫–∏–π —Å—á—ë—Ç –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ
‚Äî –∫–∞–∫ —Å–æ–±—Ä–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º
‚Äî –∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ –Ω–∞—á–∞—Ç—å —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π
‚Äî –±–æ–Ω—É—Å: –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞, –∫–∞–∫ –Ω–µ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤, —Ç–æ–ø-5 –æ—à–∏–±–æ–∫ –Ω–æ–≤–∏—á–∫–æ–≤

üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 100 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:
–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–µ—Å—å –∫—É—Ä—Å –≤—Å–µ–≥–æ –∑–∞ 15 000 ‚Ç∏
(–¥–∞–ª—å—à–µ —Ü–µ–Ω–∞ –≤—ã—Ä–∞—Å—Ç–µ—Ç –¥–æ 250 000 ‚Ç∏)

–≠—Ç–æ –≤–∞—à —à–∞–Ω—Å –∑–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è –Ω–∞–≤–µ—Å—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –≤ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö, —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –∏ –≤—ã–π—Ç–∏ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –¥–µ–Ω—å–≥–∞—Ö.

üì≤ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª https://t.me/+X5Hlfy7pQnoyZGMy, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –∫—É—Ä—Å–∞

–ë—É–¥—É —Ä–∞–¥–∞ –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ —á–∏—Å–ª–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!
""")

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    if random.random() < 1:
        parts.append(random.choice(good_endings))

    # –°–∫–ª–µ–∏–≤–∞–µ–º —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
    final_message = "\n".join(part for part in parts if part.strip())
    return final_message


def ensure_directories():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ."""
    for folder in ['contacts', 'templates', 'logs']:
        os.makedirs(folder, exist_ok=True)

    if not os.path.exists(CONTACTS_FILE):
        with open(CONTACTS_FILE, 'w', encoding='utf-8') as f:
            f.write('name,phone\n')

    if not os.path.exists(TEMPLATES_FILE):
        with open(TEMPLATES_FILE, 'w', encoding='utf-8') as f:
            f.write('–ü—Ä–∏–≤–µ—Ç, {name}!\n')

    if not os.path.exists(CONFIG_FILE):
        default_config = {
            "minDelay": 7,
            "maxDelay": 20,
            "dailyLimit": 100
        }
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(default_config, f, indent=4)

    # –°–æ–∑–¥–∞–µ–º CSV –ª–æ–≥–∏
    for csv_file, headers in [
        (SUCCESS_LOG.replace('.txt', '.csv'), ['name', 'phone', 'message', 'timestamp']),
        (ERROR_LOG.replace('.txt', '.csv'), ['name', 'phone', 'error', 'timestamp']),
        ('logs/not_registered.csv', ['name', 'phone', 'timestamp'])
    ]:
        if not os.path.exists(csv_file):
            with open(csv_file, 'w', newline='', encoding='utf-8') as f:
                writer = csv.writer(f)
                writer.writerow(headers)


def load_stoplist(filepath=STOPLIST_FILE):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞."""
    stop_numbers = set()
    with open(filepath, encoding='utf-8') as f:
        for line in f:
            phone = line.strip()
            if phone:
                stop_numbers.add(phone)
    print(f"üìõ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(stop_numbers)} –Ω–æ–º–µ—Ä–æ–≤ –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞")
    return stop_numbers


def load_contacts(filepath=CONTACTS_FILE, stoplist_path=STOPLIST_FILE):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –∏—Å–∫–ª—é—á–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞."""
    stop_numbers = load_stoplist(stoplist_path)
    all_contacts = []
    filtered_contacts = []

    with open(filepath, encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            phone = row.get('phone', '').strip()
            if not phone:
                continue

            raw_name = row.get('name', '').strip()
            name = raw_name.split()[0] if raw_name else "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ"

            all_contacts.append({'name': name, 'phone': phone})

            if phone not in stop_numbers:
                filtered_contacts.append({'name': name, 'phone': phone})

    print(f"üìÑ –í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ CSV: {len(all_contacts)}")
    print(f"üö´ –ò–∑ –Ω–∏—Ö –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ: {len(all_contacts) - len(filtered_contacts)}")
    print(f"‚úÖ –î–æ–ø—É—â–µ–Ω–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ: {len(filtered_contacts)}")

    return filtered_contacts


def load_sent_contacts():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ."""
    sent_contacts = set()
    csv_file = SUCCESS_LOG.replace('.txt', '.csv')
    if os.path.exists(csv_file):
        with open(csv_file, encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                sent_contacts.add(row['phone'])
    return sent_contacts

def load_templates():
    with open(TEMPLATES_FILE, encoding='utf-8') as f:
        templates = [line.strip() for line in f if line.strip()]
    return templates

def load_config():
    with open(CONFIG_FILE, encoding='utf-8') as f:
        return json.load(f)

def log_to_file(path, text):
    with open(path, 'a', encoding='utf-8') as f:
        f.write(f"{datetime.now()} - {text}\n")

def log_to_csv(file_path, row):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –≤ CSV –ª–æ–≥."""
    with open(file_path, 'a', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(row)

def random_human_delay(min_sec, max_sec):
    delay = random.uniform(min_sec, max_sec)
    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay:.2f} —Å–µ–∫—É–Ω–¥...")
    time.sleep(delay)

def slight_mouse_move():
    x, y = pyautogui.position()
    pyautogui.moveTo(x + random.randint(-20, 20), y + random.randint(-20, 20), duration=0.5)

def check_number_validity(driver):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –Ω–æ–º–µ—Ä –≤ WhatsApp."""
    try:
        error_element = driver.find_element(By.XPATH, '//div[contains(@data-testid, "alert")]')
        if "–Ω–æ–º–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" in error_element.text.lower():
            return False
    except:
        pass
    return True

def wait_for_chat_modal(driver, timeout=180):
    modal_xpath = '//h1[text()="–ù–∞—á–∞–ª–æ —á–∞—Ç–∞"]/ancestor::div[@data-animate-modal-popup="true"]'
    start_time = time.time()

    try:
        print("‚åõ –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ '–ù–∞—á–∞–ª–æ —á–∞—Ç–∞'...")
        WebDriverWait(driver, timeout).until(
            EC.presence_of_element_located((By.XPATH, modal_xpath))
        )
        print("‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—è–≤–∏–ª–æ—Å—å")

    except TimeoutException:
        print("‚ö†Ô∏è –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å –∑–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: {e}")
        return False

    try:
        print("‚åõ –û–∂–∏–¥–∞–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞...")
        WebDriverWait(driver, timeout).until_not(
            EC.presence_of_element_located((By.XPATH, modal_xpath))
        )
        print(f"‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏—Å—á–µ–∑–ª–æ —á–µ—Ä–µ–∑ {round(time.time() - start_time, 2)} —Å–µ–∫—É–Ω–¥")
        return True

    except TimeoutException:
        print("‚ö†Ô∏è –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –∏—Å—á–µ–∑–ª–æ –∑–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: {e}")
        return False


def send_message(driver, phone, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WhatsApp Web."""
    url = f"https://web.whatsapp.com/send?phone={phone}"
    print(f"üì® –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç —Å –Ω–æ–º–µ—Ä–æ–º: {phone}")
    driver.get(url)
    
    # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ "–ù–∞—á–∞–ª–æ —á–∞—Ç–∞"
    if not wait_for_chat_modal(driver, timeout=300):
        print("‚ùå –ß–∞—Ç –Ω–µ –≥–æ—Ç–æ–≤. –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É.")
        return 'chat_not_ready'

    slight_mouse_move()
    print("üñ±Ô∏è –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–≤–∏–Ω—É–ª–∏ –º—ã—à–∫—É")

    if not check_number_validity(driver):
        print("‚ùå –ù–æ–º–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ WhatsApp")
        return 'not_registered'

    try:
        print("üìã –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞...")
        pyperclip.copy(message)
        time.sleep(0.2)
        copied = pyperclip.paste()
        if copied != message:
            print("‚ùå –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–ø–∞–ª–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")
            return 'clipboard_error'
        print("üìã –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")

        timeout = 30
        print("‚åõ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—è –≤–≤–æ–¥–∞...")
        input_box = WebDriverWait(driver, timeout).until(
            EC.element_to_be_clickable((By.XPATH, '//div[@aria-placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"]'))
        )

        print("‚úÖ –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–æ. –ö–ª–∏–∫–∞–µ–º...")
        input_box.click()
        driver.execute_script("arguments[0].focus();", input_box)
        time.sleep(0.5)

        print("‚å®Ô∏è –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (Ctrl+V)...")
        input_box.send_keys(Keys.CONTROL, 'v')
        time.sleep(0.3)

        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (Enter)...")
        input_box.send_keys(Keys.ENTER)
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return 'success'

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {type(e).__name__}: {e}")
        return 'error'


def print_status(message, color=Fore.WHITE):
    print(color + message + Style.RESET_ALL)

# === –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç ===

def main():
    ensure_directories()
    config = load_config()

    min_delay = config.get('minDelay', 7)
    max_delay = config.get('maxDelay', 20)
    daily_limit = config.get('dailyLimit', 100)

    contacts = load_contacts()
    templates = load_templates()
    sent_contacts = load_sent_contacts()

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    contacts_to_send = [c for c in contacts if c['phone'] not in sent_contacts]

    if not contacts_to_send:
        print(Fore.YELLOW + "‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    print(Fore.CYAN + f"–ù–∞–π–¥–µ–Ω–æ {len(contacts_to_send)} –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")

    profile_path = r'C:\Users\Merri\AppData\Roaming\Mozilla\Firefox\Profiles\z1hmvzj2.default'
    options = webdriver.FirefoxOptions()
    options.add_argument("--start-maximized")
    options.add_argument('-profile')
    options.add_argument(profile_path)

    driver = webdriver.Firefox(options=options)

    driver.get('https://web.whatsapp.com/')

    print(Fore.CYAN + "üîé –ü—Ä–æ–≤–µ—Ä—è—é, –∑–∞–ª–æ–≥–∏–Ω–µ–Ω—ã –ª–∏ –≤—ã –≤ WhatsApp...")

    try:
        chat_list_xpath = '//div[@id="pane-side"]'
        WebDriverWait(driver, 600).until(EC.presence_of_element_located((By.XPATH, chat_list_xpath)))
        print(Fore.GREEN + "‚úÖ –í—ã –≤–æ—à–ª–∏ –≤ WhatsApp! –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...")
    except Exception as e:
        print(Fore.RED + "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ WhatsApp –∑–∞ 5 –º–∏–Ω—É—Ç.")
        driver.quit()
        sys.exit()

    sent_count = 0

    for contact in contacts_to_send:
        if sent_count >= daily_limit:
            print(Fore.YELLOW + f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –≤ {daily_limit} —Å–æ–æ–±—â–µ–Ω–∏–π.")
            break

        name = contact['name']
        phone = contact['phone']
        message = generate_message(name, templates)

        print_status(f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {name} ({phone})...", Fore.BLUE)
        result = send_message(driver, phone, message)

        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        if result == 'success':
            log_to_csv(SUCCESS_LOG.replace('.txt', '.csv'), [name, phone, message, timestamp ])
            print_status(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {name}", Fore.GREEN)
        elif result == 'not_registered':
            log_to_csv('logs/not_registered.csv', [name, phone, timestamp])
            print_status(f"‚ö†Ô∏è {name} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ WhatsApp", Fore.YELLOW)
        else:
            log_to_csv(ERROR_LOG.replace('.txt', '.csv'), [name, phone, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", timestamp])
            print_status(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {name}", Fore.RED)

        sent_count += 1
        random_human_delay(min_delay, max_delay)

    print(Fore.CYAN + "\nüìã –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    driver.quit()


if __name__ == "__main__":
    main()
