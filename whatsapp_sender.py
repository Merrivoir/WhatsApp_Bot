import sys
import os
import csv
import json
import random
import time
import pyperclip
import pyautogui

from datetime import datetime
from urllib.parse import quote
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.firefox.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from colorama import Fore, Style, init

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
init(autoreset=True)

# === –ü—É—Ç–∏ ===
CONTACTS_FILE = 'contacts/contacts.csv'
TEMPLATES_FILE = 'templates/templates.txt'
SUCCESS_LOG = 'logs/log_success.txt'
ERROR_LOG = 'logs/log_error.txt'
REPORT_FILE = 'logs/report.txt'
CONFIG_FILE = 'config.json'
STOPLIST_FILE = 'contacts/stoplist.csv'

# === –§—É–Ω–∫—Ü–∏–∏ ===

import random

# –°–ø–∏—Å–∫–∏ –¥–ª—è –∂–∏–≤–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
greetings = [
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}",
    "{name}, –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ",
]

good_endings = [
    "",
    "",
]

def generate_message(name, templates): 
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∂–∏–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–º–µ–Ω–∏."""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è
    has_real_name = name.lower() != "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ"

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–±–ª–æ–Ω
    base_message = random.choice(templates)
    base_message = base_message.replace("{name}", name) if has_real_name else base_message.replace("{name}", "")

    parts = []

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (—Å –∏–º–µ–Ω–µ–º –∏–ª–∏ –±–µ–∑)
    if random.random() < 1:
        if has_real_name:
            greet = random.choice(greetings).replace("{name}", name)
        else:
            greet = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!"
        parts.append(greet)

    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    parts.append("""
üëã –†–∞–Ω–µ–µ –≤—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å –∏–≥—Ä–æ–π CashFlow, –∏ —É –Ω–∞—Å –æ—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ ‚Äî –º—ã –æ—Ç–∫—Ä—ã–ª–∏ –≥—Ä—É–ø–ø—ã –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤! üéâ

üìÖ *–í—Ç–æ—Ä–Ω–∏–∫ —Å 19:00 –¥–æ 22:00*
üìÖ *–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —Å 17:00 –¥–æ 20:00*

‚úÖ _–û–±—ä—è—Å–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Å –Ω—É–ª—è_
‚úÖ _–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ_
‚úÖ _–ü–æ–º–æ–≥–∞–µ–º —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ —Ç–æ—á–∫–∏ —Ä–æ—Å—Ç–∞_
‚úÖ _–°–æ–∑–¥–∞—ë–º —Ç—ë–ø–ª—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∑–Ω–∞–∫–æ–º–∏–º —Å –∫–ª–∞—Å—Å–Ω—ã–º–∏ –ª—é–¥—å–º–∏_

–≠—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—á–∞—Ç—å –ø—É—Ç—å –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –∏ –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –≤ –∂–∏–∑–Ω–∏ –∏ –±–∏–∑–Ω–µ—Å–µ.

*–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "+" –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ*
–ë—É–¥—É —Ä–∞–¥–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å¬†–Ω–∞¬†–∏–≥—Ä–µ!¬†""")

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    if random.random() < 1:
        parts.append(random.choice(good_endings))

    # –°–∫–ª–µ–∏–≤–∞–µ–º —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
    final_message = "\n".join(part for part in parts if part.strip())
    return final_message


def ensure_directories():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ."""
    for folder in ['contacts', 'templates', 'logs']:
        os.makedirs(folder, exist_ok=True)

    if not os.path.exists(CONTACTS_FILE):
        with open(CONTACTS_FILE, 'w', encoding='utf-8') as f:
            f.write('name,phone\n')

    if not os.path.exists(TEMPLATES_FILE):
        with open(TEMPLATES_FILE, 'w', encoding='utf-8') as f:
            f.write('–ü—Ä–∏–≤–µ—Ç, {name}!\n')

    if not os.path.exists(CONFIG_FILE):
        default_config = {
            "minDelay": 7,
            "maxDelay": 20,
            "dailyLimit": 100
        }
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(default_config, f, indent=4)

    # –°–æ–∑–¥–∞–µ–º CSV –ª–æ–≥–∏
    for csv_file, headers in [
        (SUCCESS_LOG.replace('.txt', '.csv'), ['name', 'phone', 'message', 'timestamp']),
        (ERROR_LOG.replace('.txt', '.csv'), ['name', 'phone', 'error', 'timestamp']),
        ('logs/not_registered.csv', ['name', 'phone', 'timestamp'])
    ]:
        if not os.path.exists(csv_file):
            with open(csv_file, 'w', newline='', encoding='utf-8') as f:
                writer = csv.writer(f)
                writer.writerow(headers)


def load_stoplist(filepath=STOPLIST_FILE):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞."""
    stop_numbers = set()
    with open(filepath, encoding='utf-8') as f:
        for line in f:
            phone = line.strip()
            if phone:
                stop_numbers.add(phone)
    print(f"üìõ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(stop_numbers)} –Ω–æ–º–µ—Ä–æ–≤ –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞")
    return stop_numbers


def load_contacts(filepath=CONTACTS_FILE, stoplist_path=STOPLIST_FILE):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –∏—Å–∫–ª—é—á–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞."""
    stop_numbers = load_stoplist(stoplist_path)
    all_contacts = []
    filtered_contacts = []

    with open(filepath, encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            phone = row.get('phone', '').strip()
            if not phone:
                continue

            raw_name = row.get('name', '').strip()
            name = raw_name.split()[0] if raw_name else "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ"

            all_contacts.append({'name': name, 'phone': phone})

            if phone not in stop_numbers:
                filtered_contacts.append({'name': name, 'phone': phone})

    print(f"üìÑ –í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ CSV: {len(all_contacts)}")
    print(f"üö´ –ò–∑ –Ω–∏—Ö –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ: {len(all_contacts) - len(filtered_contacts)}")
    print(f"‚úÖ –î–æ–ø—É—â–µ–Ω–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ: {len(filtered_contacts)}")

    return filtered_contacts


def load_sent_contacts():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ."""
    sent_contacts = set()
    csv_file = SUCCESS_LOG.replace('.txt', '.csv')
    if os.path.exists(csv_file):
        with open(csv_file, encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                sent_contacts.add(row['phone'])
    return sent_contacts

def load_templates():
    with open(TEMPLATES_FILE, encoding='utf-8') as f:
        templates = [line.strip() for line in f if line.strip()]
    return templates

def load_config():
    with open(CONFIG_FILE, encoding='utf-8') as f:
        return json.load(f)

def log_to_file(path, text):
    with open(path, 'a', encoding='utf-8') as f:
        f.write(f"{datetime.now()} - {text}\n")

def log_to_csv(file_path, row):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –≤ CSV –ª–æ–≥."""
    with open(file_path, 'a', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(row)

def random_human_delay(min_sec, max_sec):
    delay = random.uniform(min_sec, max_sec)
    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay:.2f} —Å–µ–∫—É–Ω–¥...")
    time.sleep(delay)

def slight_mouse_move():
    x, y = pyautogui.position()
    pyautogui.moveTo(x + random.randint(-20, 20), y + random.randint(-20, 20), duration=0.5)

def check_number_validity(driver):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –Ω–æ–º–µ—Ä –≤ WhatsApp."""
    try:
        error_element = driver.find_element(By.XPATH, '//div[contains(@data-testid, "alert")]')
        if "–Ω–æ–º–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" in error_element.text.lower():
            return False
    except:
        pass
    return True

def send_message(driver, phone, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WhatsApp Web."""
    url = f"https://web.whatsapp.com/send?phone={phone}"
    print(f"üì® –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç —Å –Ω–æ–º–µ—Ä–æ–º: {phone}")
    driver.get(url)
    time.sleep(20)  # –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É —á–∞—Ç–∞

    slight_mouse_move()
    print("üñ±Ô∏è –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–≤–∏–Ω—É–ª–∏ –º—ã—à–∫—É")

    if not check_number_validity(driver):
        print("‚ùå –ù–æ–º–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ WhatsApp")
        return 'not_registered'

    try:
        print("üìã –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞...")
        pyperclip.copy(message)
        time.sleep(0.2)
        copied = pyperclip.paste()
        if copied != message:
            print("‚ùå –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–ø–∞–ª–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")
            return 'clipboard_error'
        print("üìã –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")

        print("‚åõ –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        input_box = WebDriverWait(driver, 30).until(
            lambda d: d.find_element(By.XPATH, '//div[@aria-placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"]')
        )
        print("‚úÖ –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–æ. –ö–ª–∏–∫–∞–µ–º...")
        input_box.click()

        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        driver.execute_script("arguments[0].focus();", input_box)
        time.sleep(0.5)

        print("‚å®Ô∏è –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (Ctrl+V)...")
        input_box.send_keys(Keys.CONTROL, 'v')
        time.sleep(0.3)

        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (Enter)...")
        input_box.send_keys(Keys.ENTER)
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return 'success'

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        return 'error'


def print_status(message, color=Fore.WHITE):
    print(color + message + Style.RESET_ALL)

# === –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç ===

def main():
    ensure_directories()
    config = load_config()

    min_delay = config.get('minDelay', 7)
    max_delay = config.get('maxDelay', 20)
    daily_limit = config.get('dailyLimit', 100)

    contacts = load_contacts()
    templates = load_templates()
    sent_contacts = load_sent_contacts()

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    contacts_to_send = [c for c in contacts if c['phone'] not in sent_contacts]

    if not contacts_to_send:
        print(Fore.YELLOW + "‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    print(Fore.CYAN + f"–ù–∞–π–¥–µ–Ω–æ {len(contacts_to_send)} –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")

    profile_path = r'C:\Users\Paul Lvov\AppData\Roaming\Mozilla\Firefox\Profiles\qa82eqx1.default'
    options = webdriver.FirefoxOptions()
    options.add_argument("--start-maximized")
    options.add_argument('-profile')
    options.add_argument(profile_path)

    driver = webdriver.Firefox(options=options)

    driver.get('https://web.whatsapp.com/')

    print(Fore.CYAN + "üîé –ü—Ä–æ–≤–µ—Ä—è—é, –∑–∞–ª–æ–≥–∏–Ω–µ–Ω—ã –ª–∏ –≤—ã –≤ WhatsApp...")

    try:
        chat_list_xpath = '//div[@id="pane-side"]'
        WebDriverWait(driver, 120).until(EC.presence_of_element_located((By.XPATH, chat_list_xpath)))
        print(Fore.GREEN + "‚úÖ –í—ã –≤–æ—à–ª–∏ –≤ WhatsApp! –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...")
    except Exception as e:
        print(Fore.RED + "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ WhatsApp –∑–∞ 2 –º–∏–Ω—É—Ç—ã.")
        driver.quit()
        sys.exit()

    sent_count = 0

    for contact in contacts_to_send:
        if sent_count >= daily_limit:
            print(Fore.YELLOW + f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –≤ {daily_limit} —Å–æ–æ–±—â–µ–Ω–∏–π.")
            break

        name = contact['name']
        phone = contact['phone']
        message = generate_message(name, templates)

        print_status(f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {name} ({phone})...", Fore.BLUE)
        result = send_message(driver, phone, message)

        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        if result == 'success':
            log_to_csv(SUCCESS_LOG.replace('.txt', '.csv'), [name, phone, message, timestamp])
            print_status(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {name}", Fore.GREEN)
        elif result == 'not_registered':
            log_to_csv('logs/not_registered.csv', [name, phone, timestamp])
            print_status(f"‚ö†Ô∏è {name} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ WhatsApp", Fore.YELLOW)
        else:
            log_to_csv(ERROR_LOG.replace('.txt', '.csv'), [name, phone, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", timestamp])
            print_status(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {name}", Fore.RED)

        sent_count += 1
        random_human_delay(min_delay, max_delay)

    print(Fore.CYAN + "\nüìã –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    driver.quit()


if __name__ == "__main__":
    main()
